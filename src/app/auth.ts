import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router'; 
export type UserRole = 'guest' | 'user' | 'admin';

@Injectable({ providedIn: 'root' })
export class AuthService {
  // üîë ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadState() ‡πÉ‡∏ô constructor
  private loggedIn = new BehaviorSubject<boolean>(false);
  private role = new BehaviorSubject<UserRole>('guest');

  isLoggedIn$ = this.loggedIn.asObservable();
  role$ = this.role.asObservable();
  

  constructor(private router: Router) {
    // üîë ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Service ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏´‡∏•‡∏±‡∏á Refresh) ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å localStorage
    this.loadState();
  }

  private loadState(): void {
    const token = localStorage.getItem('auth_token');
    const userRole = localStorage.getItem('user_role') as UserRole;

    if (token && userRole) {
      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö Token ‡πÅ‡∏•‡∏∞ Role ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
      this.loggedIn.next(true);
      this.role.next(userRole);
    }
  }

  login(userRole: UserRole = 'user') {
    // üîë ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡πÅ‡∏•‡∏∞ Role ‡∏•‡∏á‡πÉ‡∏ô localStorage
    localStorage.setItem('auth_token', 'some-secret-token');
    localStorage.setItem('user_role', userRole);

    this.loggedIn.next(true);
    this.role.next(userRole);
  }

 logout() {
    // 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    localStorage.removeItem('auth_token');
    localStorage.removeItem('user_role');

    // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Subject
    this.loggedIn.next(false);
    this.role.next('guest');
    
    // üîë 3. ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Router ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ '/login'
    this.router.navigate(['/login']); 
  }

  getRole(): UserRole {
    return this.role.getValue();
  }
}